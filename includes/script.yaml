desktop_reiniciar:
  sequence:
  - service: shell_command.desktop_reiniciar
  alias: "Reiniciar desktop"

desktop_abrir_chrome:
  sequence:
  - service: shell_command.desktop_abrir_chrome
  alias: "Abrir Chrome no desktop"

garagem_muvrh_entrar:
  sequence:
  - service: script.garagem_muvrh_rua
  - delay: '00:00:01'
  - service: script.garagem_muvrh_interno
  - delay: '00:00:15'
  - service: script.garagem_muvrh_rua
  - delay: '00:00:08'
  - service: script.garagem_muvrh_interno
  - service: input_boolean.turn_off
    entity_id: input_boolean.entrar_muvrh

garagem_muvrh_sair:
  sequence:
  - service: script.garagem_muvrh_interno
  - delay: '00:00:01'
  - service: script.garagem_muvrh_rua
  - delay: '00:00:15'
  - service: script.garagem_muvrh_interno
  - delay: '00:00:08'
  - service: script.garagem_muvrh_rua
  - service: input_boolean.turn_off
    entity_id: input_boolean.sair_muvrh

garagem_casa_abrir:
  alias: "Abrir garagem de casa"
  sequence:
  - service: script.garagem_casa
  - delay: '00:00:35'
  - service: cover.close_cover
    entity_id: cover.garagem_casa

garagem_casa_fechar:
  alias: "Fechar garagem de casa"
  sequence:
  - service: cover.close_cover
    entity_id: cover.garagem_casa

garagem_muvrh_rua_abrir:
  alias: "Abrir garagem da rua do trabalho"
  sequence:
  - service: script.garagem_muvrh_rua
    entity_id: cover.garagem_muvrh_rua
  - delay: '00:00:25'
  - service: cover.close_cover
    entity_id: cover.garagem_muvrh_rua

garagem_muvrh_rua_fechar:
  alias: "Fechar garagem da rua do trabalho"
  sequence:
  - service: cover.close_cover
    entity_id: cover.garagem_muvrh_rua

garagem_muvrh_interno_abrir:
  alias: "Abrir garagem interna do trabalho"
  sequence:
  - service: script.garagem_muvrh_interno
    entity_id: cover.garagem_muvrh_interno
  - delay: '00:00:25'
  - service: cover.close_cover
    entity_id: cover.garagem_muvrh_interno

garagem_muvrh_interno_fechar:
  alias: "Fechar garagem interna do trabalho"
  sequence:
  - service: cover.close_cover
    entity_id: cover.garagem_muvrh_interno

tv_lg_sala_ligar_tudo:
  alias: "Ligar TV, home e luz da sala"
  sequence:
  - service: script.tv_lg_sala_power_on
  - service: switch.turn_on
    entity_id: switch.home_theater_sala
  - condition: state
    entity_id: light.ledsalatv
    state: 'off'
  - service: light.turn_on
    entity_id: light.ledsalatv
    data:
      transition: 3
      brightness_pct: 100
      effect: 'RGB transition slow'

tv_lg_sala_desligar_tudo:
  alias: "Desligar TV, home e luz da sala"
  sequence:
  - service: media_player.turn_off
    entity_id: media_player.tv_sala
  - service_template: >
      {% if is_state('switch.home_theater_sala', 'on') %}
        switch.turn_off
      {% else %}
        script.nada
      {% endif %}
    entity_id: switch.home_theater_sala
  - service_template: >
      {% if is_state('light.ledsalatv', 'on') %}
        light.turn_off
      {% else %}
        script.nada
      {% endif %}
    entity_id:
      - light.ledsalatv

ledsalatv_ligar_colorloop:
  alias: "Ligar Led da TV da sala com efeito"
  sequence:
  - service: light.turn_on
    entity_id: light.ledsalatv
    data:
      transition: 1
      brightness_pct: 100
      effect: 'RGB transition slow'

ledquartotv_ligar_colorloop:
  alias: "Ligar Led da TV do quarto com efeito"
  sequence:
  - service: light.turn_on
    entity_id: light.ledquartotv
    data:
      transition: 1
      brightness_pct: 100
      effect: 'RGB transition fast'

energia_casa:
  alias: "Desligar tudo em casa ao sair"
  sequence:
  - service: script.casa_desligar_tudo
  - wait_template: "{{is_state('script.casa_desligar_tudo', 'off')}}"
  - condition: state
    entity_id: switch.automacoes_luzes
    state: 'on'
  - service: light.turn_on
    entity_id: light.entrada
  - wait_template: "{{is_state('binary_sensor.entrada_casa', 'on')}}"
  - wait_template: "{{is_state('binary_sensor.entrada_casa', 'off')}}"
  - service: light.turn_off
    entity_id: light.entrada

assistir_youtube:
  alias: "Assistir youtube"
  sequence:
  - service_template: "{% if not is_state('media_player.tv_sala' , 'off')%}script.nada{% else %}script.tv_lg_sala_ligar_tudo{% endif %}"
  - wait_template: "{{not is_state('media_player.tv_sala', 'off')}}"
  - service: media_player.select_source
    data:
      entity_id: media_player.tv_sala
      source: "YouTube"
  - wait_template: >-
      {% if states.media_player.tv_sala.attributes.source == "YouTube" %}
        True
      {% else %}
        False
      {% endif %}
  - delay: '00:00:12'
  - service: script.tv_lg_sala_left
  - delay: '00:00:02'
  - service: script.tv_lg_sala_down
  - delay: '00:00:02'
  - service: script.tv_lg_sala_down
  - delay: '00:00:02'
  - service: script.tv_lg_sala_right
  - delay: '00:00:02'
  - service: script.tv_lg_sala_down
  - delay: '00:00:02'
  - service: script.tv_lg_sala_down
  - delay: '00:00:02'
  - service: script.tv_lg_sala_right

# Sonoffs

tasmota_restart_all:
  alias: "Reiniciar todos dispositivos com Tasmota"
  sequence:
  - service: mqtt.publish
    data:
      topic: "cmnd/sonoffs/"
      payload: 'restart 1'
      qos: 1

# Botões Xiaomi

botao_xiaomi_quarto_01_single:
  alias: "Luzes do quarto"
  sequence:
  - service_template: >
      {% if is_state('light.quarto' , 'off') and is_state('light.ledquartotv' , 'off') %}
        light.turn_on
      {% elif is_state('light.quarto' , 'on') and is_state('light.ledquartotv' , 'on') %}
        light.turn_off
      {% elif is_state('light.quarto' , 'off') and is_state('light.ledquartotv' , 'on') %}
        light.turn_off
      {% elif is_state('light.quarto' , 'on') and is_state('light.ledquartotv' , 'off') %}
        light.turn_on
      {% else %}
        script.nada
      {% endif %}
    data_template:
      entity_id: >
        {% if is_state('light.quarto' , 'off') and is_state('light.ledquartotv' , 'off') %}
          light.quarto, light.ledquartotv
        {% elif is_state('light.quarto' , 'on') and is_state('light.ledquartotv' , 'on') %}
          light.quarto
        {% elif is_state('light.quarto' , 'off') and is_state('light.ledquartotv' , 'on') %}
          light.ledquartotv
        {% elif is_state('light.quarto' , 'on') and is_state('light.ledquartotv' , 'off') %}
          light.ledquartotv
        {% endif %}

botao_xiaomi_quarto_01_double:
  alias: "TV do quarto"
  sequence:
  - service: script.tv_lg_quarto_power

botao_xiaomi_quarto_01_triple:
  alias: "Liga ou desliga ar condicionado do quarto"
  sequence:
  - service: climate.set_operation_mode
    data_template:
      entity_id: climate.ar_condicionado_do_quarto
      operation_mode: >
        {% if states.climate.ar_condicionado_do_quarto.attributes.current_temperature | int >= 25 and (states.climate.ar_condicionado_do_quarto.state == 'off' or states.climate.ar_condicionado_do_quarto.state == 'off') %}
          cool
        {% elif states.climate.ar_condicionado_do_quarto.attributes.current_temperature | int <= 24 and (states.climate.ar_condicionado_do_quarto.state == 'off' or states.climate.ar_condicionado_do_quarto.state == 'off') %}
          heat
        {% else %}
          off
        {% endif %}
  - condition: template
    value_template: "{% if (is_state('climate.ar_condicionado_do_quarto' , 'auto') or is_state('climate.ar_condicionado_do_quarto' , 'cool') or is_state('climate.ar_condicionado_do_quarto' , 'heat')) and is_state('input_boolean.boa_noite' , 'on') %}True{% else %}False{% endif %}"
  - delay: '00:00:02'
  - service: script.ar_quarto_display

botao_xiaomi_quarto_01_long:
  alias: "Persiana do quarto"
  sequence:
  - service_template: >
      {% if is_state('cover.persiana_quarto' , 'open') %}
        cover.close_cover
      {% elif is_state('cover.persiana_quarto' , 'closed') %}
        cover.open_cover
      {% else %}
        script.nada
      {% endif %}
    entity_id: cover.persiana_quarto

botao_xiaomi_suite_01_single:
  alias: "Luzes da suíte"
  sequence:
  - service_template: >
      {% if is_state('light.suite_principal' , 'off') and is_state('light.todos_os_leds_suite' , 'off') %}
        light.turn_on
      {% elif is_state('light.suite_principal' , 'on') and is_state('light.todos_os_leds_suite' , 'on') %}
        light.turn_off
      {% elif is_state('light.suite_principal' , 'off') and is_state('light.todos_os_leds_suite' , 'on') %}
        light.turn_off
      {% elif is_state('light.suite_principal' , 'on') and is_state('light.todos_os_leds_suite' , 'off') %}
        light.turn_on
      {% else %}
        script.nada
      {% endif %}
    data_template:
      entity_id: >
        {% if is_state('light.suite_principal' , 'off') and is_state('light.todos_os_leds_suite' , 'off') %}
          light.suite_principal, light.todos_os_leds_suite
        {% elif is_state('light.suite_principal' , 'on') and is_state('light.todos_os_leds_suite' , 'on') %}
          light.suite_principal
        {% elif is_state('light.suite_principal' , 'off') and is_state('light.todos_os_leds_suite' , 'on') %}
          light.todos_os_leds_suite
        {% elif is_state('light.suite_principal' , 'on') and is_state('light.todos_os_leds_suite' , 'off') %}
          light.todos_os_leds_suite
        {% endif %}

botao_xiaomi_suite_01_double:
  alias: "TV da suíte"
  sequence:
  - service: script.tv_lg_suite_power

botao_xiaomi_suite_01_triple:
  alias: "Liga ou desliga ar condicionado"
  sequence:
  - service: climate.set_operation_mode
    data_template:
      entity_id: climate.ar_condicionado_da_suite
      operation_mode: >
        {% if states.climate.ar_condicionado_da_suite.attributes.current_temperature | int >= 25 and (states.climate.ar_condicionado_da_suite.state == 'off' or states.climate.ar_condicionado_da_suite.state == 'off') %}
          cool
        {% elif states.climate.ar_condicionado_da_suite.attributes.current_temperature | int <= 24 and (states.climate.ar_condicionado_da_suite.state == 'off' or states.climate.ar_condicionado_da_suite.state == 'off') %}
          heat
        {% else %}
          off
        {% endif %}
  - condition: template
    value_template: "{% if (is_state('climate.ar_condicionado_da_suite' , 'auto') or is_state('climate.ar_condicionado_da_suite' , 'cool') or is_state('climate.ar_condicionado_da_suite' , 'heat')) and is_state('input_boolean.boa_noite' , 'on') %}True{% else %}False{% endif %}"
  - delay: '00:00:02'
  - service: script.ar_suite_display

botao_xiaomi_suite_01_long:
  alias: "Persiana da suíte"
  sequence:
  - service_template: >
      {% if is_state('cover.persiana_suite' , 'open') %}
        cover.close_cover
      {% elif is_state('cover.persiana_suite' , 'closed') %}
        cover.open_cover
      {% else %}
        script.nada
      {% endif %}
    entity_id: cover.persiana_suite

botao_xiaomi_suite_02_single:
  alias: "Luz da cama"
  sequence:
  - service: light.toggle
    entity_id: light.ledsuitecama
    data_template:
      transition: 6
      brightness_pct: >
          {%- if is_state('input_boolean.boa_noite' , 'on') %}
            25
          {%- elif is_state('input_boolean.boa_noite' , 'off') %}
            100
          {% endif %}

botao_xiaomi_suite_02_double:
  alias: "Liga ou desliga ar condicionado"
  sequence:
  - service: climate.set_operation_mode
    data_template:
      entity_id: climate.ar_condicionado_da_suite
      operation_mode: >
        {% if states.climate.ar_condicionado_da_suite.attributes.current_temperature | int >= 25 and (states.climate.ar_condicionado_da_suite.state == 'off' or states.climate.ar_condicionado_da_suite.state == 'off') %}
          cool
        {% elif states.climate.ar_condicionado_da_suite.attributes.current_temperature | int <= 24 and (states.climate.ar_condicionado_da_suite.state == 'off' or states.climate.ar_condicionado_da_suite.state == 'off') %}
          heat
        {% else %}
          off
        {% endif %}
  - condition: template
    value_template: "{% if (is_state('climate.ar_condicionado_da_suite' , 'auto') or is_state('climate.ar_condicionado_da_suite' , 'cool') or is_state('climate.ar_condicionado_da_suite' , 'heat')) and is_state('input_boolean.boa_noite' , 'on') %}True{% else %}False{% endif %}"
  - delay: '00:00:02'
  - service: script.ar_suite_display

botao_xiaomi_suite_02_long:
  alias: "Boa noite/Bom dia"
  sequence:
  - service_template: >
      {% if((now().hour >= 5) and (now().hour <= 16))%}
        input_boolean.turn_on
      {% else %}
        script.nada
      {% endif %}
    entity_id: input_boolean.bom_dia
  - service_template: >
      {% if((now().hour >= 17) or (now().hour <= 4))%}
        input_boolean.turn_on
      {% else %}
        script.nada
      {% endif %}
    entity_id: input_boolean.boa_noite

botao_xiaomi_banheiro_suite_01_single:
  alias: "Luz do banheiro da suíte"
  sequence:
  - service: light.toggle
    entity_id: light.tudo_banheiro_suite

botao_xiaomi_banheiro_suite_01_double:
  alias: "Toalheiro"
  sequence:
  - service: switch.toggle
    entity_id: switch.toalheiro

botao_xiaomi_banheiro_suite_01_many:
  alias: "Chuveiro"
  sequence:
  - service: switch.toggle
    entity_id: switch.chuveirosuite
  - service: script.turn_off
    entity_id: script.botao_xiaomi_banheiro_suite_01_long

botao_xiaomi_banheiro_suite_01_long:
  alias: "Chuveiro banheiro da suíte"
  sequence:
  - condition: state
    entity_id: switch.chuveirosuite
    state: 'off'
  - wait_template: "{{is_state('binary_sensor.box_banheiro_suite', 'off')}}"
    timeout: 00:03:00
    continue_on_timeout: false
  - service: switch.turn_on
    entity_id: switch.chuveirosuite
  - wait_template: "{{is_state('binary_sensor.box_banheiro_suite', 'on')}}"
  - wait_template: "{{is_state('binary_sensor.box_banheiro_suite', 'off')}}"
  - condition: state
    entity_id: switch.chuveirosuite
    state: 'on'
  - delay: '00:01:30'
  - condition: state
    entity_id: switch.chuveirosuite
    state: 'on'
  - wait_template: "{{is_state('binary_sensor.box_banheiro_suite', 'on')}}"
  - service: switch.turn_off
    entity_id: switch.chuveirosuite

botao_xiaomi_banheiro_social_01_single:
  alias: "Luz principal do banheiro social"
  sequence:
  - service: light.toggle
    entity_id: light.tudo_banheiro_social

botao_xiaomi_banheiro_social_01_double:
  alias: "Luz do espelho do banheiro social"
  sequence:
  - service: light.toggle
    entity_id: light.banheiro_social_espelho

botao_xiaomi_banheiro_social_01_many:
  alias: "Chuveiro"
  sequence:
  - condition: state
    entity_id: input_boolean.visita_casa
    state: 'on'
  - service: switch.toggle
    entity_id: switch.chuveirosocial
  - service: script.turn_off
    entity_id: script.botao_xiaomi_banheiro_social_01_long

botao_xiaomi_banheiro_social_01_long:
  alias: "Chuveiro banheiro social"
  sequence:
  - condition: state
    entity_id: switch.chuveirosocial
    state: 'off'
  - wait_template: "{{is_state('binary_sensor.box_banheiro_social', 'off')}}"
    timeout: 00:03:00
    continue_on_timeout: false
  - service: switch.turn_on
    entity_id: switch.chuveirosocial
  - wait_template: "{{is_state('binary_sensor.box_banheiro_social', 'on')}}"
  - wait_template: "{{is_state('binary_sensor.box_banheiro_social', 'off')}}"
  - condition: state
    entity_id: switch.chuveirosocial
    state: 'on'
  - delay: '00:01:30'
  - condition: state
    entity_id: switch.chuveirosocial
    state: 'on'
  - wait_template: "{{is_state('binary_sensor.box_banheiro_social', 'on')}}"
  - service: switch.turn_off
    entity_id: switch.chuveirosocial

botao_xiaomi_sala_01_single:
  alias: "Luz principal da sala"
  sequence:
  - service: light.toggle
    entity_id: light.sala_principal

botao_xiaomi_sala_01_double:
  alias: "TV da sala"
  sequence:
  - service: switch.toggle
    entity_id: switch.tv_lg_sala

botao_xiaomi_sala_01_triple:
  alias: "Liga ou desliga ar condicionado da sala"
  sequence:
  - service: climate.set_operation_mode
    data_template:
      entity_id: climate.ar_condicionado_da_sala
      operation_mode: >
        {% if states.climate.ar_condicionado_da_sala.attributes.current_temperature | int >= 25 and (states.climate.ar_condicionado_da_sala.state == 'off' or states.climate.ar_condicionado_da_sala.state == 'off') %}
          cool
        {% elif states.climate.ar_condicionado_da_sala.attributes.current_temperature | int <= 24 and (states.climate.ar_condicionado_da_sala.state == 'off' or states.climate.ar_condicionado_da_sala.state == 'off') %}
          heat
        {% else %}
          off
        {% endif %}
  - condition: template
    value_template: "{% if (is_state('climate.ar_condicionado_da_sala' , 'auto') or is_state('climate.ar_condicionado_da_sala' , 'cool') or is_state('climate.ar_condicionado_da_sala' , 'heat')) and is_state('input_boolean.boa_noite' , 'on') %}True{% else %}False{% endif %}"
  - delay: '00:00:02'
  - service: script.ar_sala_display

botao_xiaomi_sala_01_quadruple:
  alias: "Luz mesa jantar"
  sequence:
  - service: light.toggle
    entity_id: light.mesa_de_jantar

botao_xiaomi_sala_01_long:
  alias: "Persiana da sala"
  sequence:
  - service_template: >
      {% if is_state('cover.persiana_sala' , 'open') %}
        script.tts_fechando_persiana_sala
      {% elif is_state('cover.persiana_sala' , 'closed') %}
        script.tts_abrindo_persiana_sala
      {% else %}
        script.nada
      {% endif %}
  - service_template: >
      {% if is_state('cover.persiana_sala' , 'open') %}
        cover.close_cover
      {% elif is_state('cover.persiana_sala' , 'closed') %}
        cover.open_cover
      {% else %}
        script.nada
      {% endif %}
    entity_id: cover.persiana_sala

botao_xiaomi_sala_02_single:
  alias: "Luz mesa jantar"
  sequence:
  - service: light.toggle
    entity_id: light.mesa_de_jantar

botao_xiaomi_sala_02_double:
  alias: "Status da casa"
  sequence:
  - service: script.tts_status_casa

botao_xiaomi_sala_02_long:
  alias: "Armar/desarmar alarme"
  sequence:
  - service: switch.toggle
    entity_id: switch.sistema_alarme_casa

botao_xiaomi_cozinha_01_single:
  alias: "Luzes principais da cozinha"
  sequence:
  - service: light.toggle
    entity_id: light.luzes_principais_cozinha

botao_xiaomi_cozinha_01_double:
  alias: "Luz área serviço"
  sequence:
  - service: light.toggle
    entity_id: light.area_servico

botao_xiaomi_cozinha_01_triple:
  alias: "Lava-louças aquaspray"
  sequence:
  - service: input_select.select_option
    entity_id: input_select.lava_loucas_casa_modo_lavagem
    data:
      option: "Aquaspray"

botao_xiaomi_cozinha_01_quadruple:
  alias: "Lava-louças econômico"
  sequence:
  - service: input_select.select_option
    entity_id: input_select.lava_loucas_casa_modo_lavagem
    data:
      option: "Econômico"

botao_xiaomi_cozinha_01_many:
  alias: "Lava-louças parar"
  sequence:
  - condition: template
    value_template: "{{ not is_state('input_select.lava_loucas_casa_modo_lavagem', 'Selecionar') }}"
  - service: mqtt.publish
    data:
      topic: 'cmnd/lava_loucas_casa/POWER1'
      payload: 'ON'
  - service: timer.cancel
    data:
      entity_id: timer.lava_loucas

botao_xiaomi_cozinha_01_long:
  alias: "Ligar ou desligar tudo"
  sequence:
  - service: light.toggle
    entity_id: light.todas_as_luzes_cozinha

botao_xiaomi_muvrh_entrada203_single:
  alias: "Ligar ou desligar luz da entrada"
  sequence:
  - service: light.toggle
    entity_id: light.muv203entrada

botao_xiaomi_muvrh_entrada203_double:
  alias: "Liga ou desliga ar condicionado da entrada"
  sequence:
  - service: climate.set_operation_mode
    data_template:
      entity_id: climate.ar_condicionado_da_entrada_203
      operation_mode: >
        {% if states.climate.ar_condicionado_da_entrada_203.attributes.current_temperature | int >= 24 and (states.climate.ar_condicionado_da_entrada_203.state == 'off' or states.climate.ar_condicionado_da_entrada_203.state == 'off') %}
          cool
        {% elif states.climate.ar_condicionado_da_entrada_203.attributes.current_temperature | int <= 20 and (states.climate.ar_condicionado_da_entrada_203.state == 'off' or states.climate.ar_condicionado_da_entrada_203.state == 'off') %}
          heat
        {% else %}
          off
        {% endif %}

botao_xiaomi_muvrh_entrada203_long:
  alias: "Ligar ou desligar luz da entrada"
  sequence:
  - service: light.toggle
    entity_id: light.muv203entrada

entrada_luz_temporizador:
  alias: "Liga a luz de entrada por 1 minuto"
  sequence:
  - condition: template
    value_template: "{% if states.sun.sun.attributes.elevation | int <= 3 %}True{% else %}False{% endif %}"
  - condition: template
    value_template: "{% if states.light.entrada.state == 'off' %}True{% else %}False{% endif %}"
  - service: light.turn_on
    entity_id: light.entrada
  - delay: '00:01:00'
  - condition: template
    value_template: "{% if states.light.entrada.state == 'on' %}True{% else %}False{% endif %}"
  - service: light.turn_off
    entity_id: light.entrada

# Cubos

cubo_sala_tv_toggle:
  alias: "Ligar ou desligar TV da sala"
  sequence:
  - service: switch.toggle
    entity_id: switch.tv_lg_sala

cubo_sala_persiana:
  alias: "Abre ou fecha persiana da sala"
  sequence:
  - service_template: >
      {% if is_state('cover.persiana_sala', 'closed') %}
        cover.open_cover
      {% else %}
        cover.close_cover
      {% endif %}
    entity_id: cover.persiana_sala

cubo_sala_luz:
  alias: "Liga ou desliga a luz da sala"
  sequence:
  - service: light.toggle
    entity_id: light.sala_principal

cubo_sala_tv_youtube:
  alias: "Mudar para Youtube"
  sequence:
  - service: media_player.select_source
    data:
      entity_id: media_player.tv_sala
      source: YouTube

cubo_sala_tv_aovivo:
  alias: "Mudar para TV ao vivo"
  sequence:
  - service: media_player.select_source
    data:
      entity_id: media_player.tv_sala
      source: LiveTV

cubo_suite_tv_toggle:
  alias: "Ligar ou desligar TV da suíte"
  sequence:
  - service: switch.toggle
    entity_id: switch.tv_lg_suite

cubo_suite_persiana:
  alias: "Abre ou fecha persiana da suíte"
  sequence:
  - service_template: >
      {% if is_state('cover.persiana_suite', 'closed') %}
        cover.open_cover
      {% else %}
        cover.close_cover
      {% endif %}
    entity_id: cover.persiana_suite

cubo_suite_luz:
  alias: "Liga ou desliga a luz da suíte"
  sequence:
  - service: light.toggle
    entity_id: light.suite_principal

cubo_suite_tv_youtube:
  alias: "Mudar para Youtube"
  sequence:
  - service: media_player.select_source
    data:
      entity_id: media_player.tv_suite
      source: YouTube

cubo_suite_tv_aovivo:
  alias: "Mudar para TV ao vivo"
  sequence:
  - service: media_player.select_source
    data:
      entity_id: media_player.tv_suite
      source: LiveTV

cubo_suite_tv_volup:
  alias: "Aumentar volume da TV"
  sequence:
  - service: media_player.volume_up
    entity_id: media_player.tv_suite

cubo_suite_tv_voldown:
  alias: "Baixar volume da TV"
  sequence:
  - service: media_player.volume_down
    entity_id: media_player.tv_suite

# MuvRH

muvrh_desligar_sala_203:
  alias: "Desligar tudo na sala 203"
  sequence:
  - service: climate.set_operation_mode
    data:
      operation_mode: 'off'
      entity_id:
        - climate.ar_condicionado_da_entrada_203
        - climate.ar_condicionado_da_nossa_sala
        - climate.ar_condicionado_da_sala_de_operacoes
  - service: light.turn_off
    entity_id:
      - light.gateway_light_34ce0090940e
      - light.muv203nossasala
      - light.muv203operacoes
      - light.muv203entrada
      - light.muv203banheiro
  - service: switch.turn_off
    entity_id:
      - switch.tv_sala_operacoes
      - switch.muv203bebedouro
      - switch.muvrh_cafeteira
  - service: notify.tudo
    data:
      title: "Alerta MuvRH"
      message: "Todos os dispositivos e luzes da sala 203 foram desligados"

muvrh_desligar_sala_303:
  alias: "Desligar tudo na sala 303"
  sequence:
  - service: climate.set_operation_mode
    data:
      operation_mode: 'off'
      entity_id: climate.ar_condicionado_da_sala_303
  - service: light.turn_off
    entity_id:
      - light.muv303entrada
      - light.muv303dinamica
      - light.muv303corredor
      - light.303leddinamica
      - light.muv303banheiro
  - service: switch.turn_off
    entity_id:
      - switch.tv_dinamica_303
      - switch.muv303bebedouro
  - service: notify.tudo
    data:
      title: "Alerta MuvRH"
      message: "Todos os dispositivos e luzes da sala 303 foram desligados"

muvrh_desligar_tudo:
  alias: "Desligar tudo na empresa"
  sequence:
  - service: script.muvrh_desligar_sala_203
  - service: script.muvrh_desligar_sala_303

testes_ios:
  alias: Testes com iOS
  sequence:
  - service: notify.ios_iphone_de_antonio
    data:
      title: "TESTE"
      message: "O que queres fazer?"
      data:
        push:
          category: "TESTES"

speed_test:
  alias: Teste de velocidade da internet
  sequence:
  - service: media_player.volume_set
    entity_id: media_player.sala, media_player.suite
    data:
      volume_level: 0.7
  - service: media_player.play_media
    data:
      entity_id: media_player.sala, media_player.suite
      media_content_id: 'http://192.168.1.12:8123/local/audio/tts/alerta_iniciando_teste_internet.mp3'
      media_content_type: 'audio/mp3'
  - service: fastdotcom.speedtest
  - wait_template: "{% if as_timestamp(now()) | int - as_timestamp(states.sensor.fast_com_download.last_updated) | int <= 5 %}True{% else %}False{% endif %}"
    timeout: 00:02:00
    continue_on_timeout: false
  - service: notify.ios_iphone_de_antonio
    data_template:
      title: "Sistema"
      message: "A velocidade da internet em casa é de {{ states.sensor.fast_com_download.state | int}} Mbit/s"
  - service: tts.amazon_polly_say
    entity_id: media_player.sala, media_player.suite
    data_template:
      message: <speak><amazon:auto-breaths frequency='medium'>Pronto, verifiquei aqui. Atualmente estão chegando {{ states.sensor.fast_com_download.state | int}} mégas aqui em casa. {% if states.sensor.fast_com_download.state | int <= 20 %}Está muito lenta, estão baixando algo neste momento ou algo de errado está acontecendo pois deveriam estar chegando 50 mégas. O Antônio já foi avisado!{% endif %}</amazon:auto-breaths></speak>

homekit_no_start:
  alias: Iniciar HomeKit
  sequence:
  - service: notify.ios_iphone_de_antonio
    data:
      title: "Sistema"
      message: "Sistema iniciado sem o componente HomeKit"

alarme_armar_casa:
  alias: Armar alarme em casa
  sequence:
  - service: alarm_control_panel.alarm_arm_home
    entity_id: alarm_control_panel.alarme

alarme_armar_fora:
  alias: Armar alarme fora de casa
  sequence:
  - service: alarm_control_panel.alarm_arm_away
    entity_id: alarm_control_panel.alarme

nada:
  alias: Não fazer nada
  sequence:
  - service: mqtt.publish
    data:
      topic: 'nada'
      payload: 'nada'  

## OctoPrint

octoprint_cancelar:
  sequence:
  - service: shell_command.octoprint_cancel
  alias: "Cancelar impressão"

octoprint_preheat_bed:
  sequence:
  - service: shell_command.octoprint_preheat_bed
  alias: "Preaquecer cama"

octoprint_preheat_tool:
  sequence:
  - service: shell_command.octoprint_preheat_tool
  alias: "Preaquecer bico"

octoprint_auto_home:
  sequence:
  - service: shell_command.octoprint_auto_home
  alias: "Centralizar"

octoprint_disable_motors:
  sequence:
  - service: shell_command.octoprint_disable_motors
  alias: "Desligar motores"
